version: '3.8'

services:
  frontend:
    build: ./services/frontend
    ports:
      - "5000:5000"
    environment:
      - FLASK_DEBUG=True
      - WEATHER_SERVICE_URL=http://weather-data:5001
      - FORECAST_SERVICE_URL=http://forecast-analytics:5002
      - AUTH_SERVICE_URL=http://auth:5003
      - SECRET_KEY=dev-secret-key-change-in-production
    depends_on:
      - weather-data
      - forecast-analytics
      - auth
    volumes:
      - ./services/frontend:/app
    networks:
      - weather-network

  weather-data:
    build: ./services/weather_data
    ports:
      - "5001:5001"
    environment:
      - FLASK_DEBUG=True
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/weather_db
      - OPENWEATHERMAP_API_KEY=${OPENWEATHERMAP_API_KEY}
    depends_on:
      - db
      - redis
    volumes:
      - ./services/weather_data:/app
    networks:
      - weather-network

  forecast-analytics:
    build: ./services/forecast_analytics
    ports:
      - "5002:5002"
    environment:
      - FLASK_DEBUG=True
      - WEATHER_SERVICE_URL=http://weather-data:5001
    depends_on:
      - weather-data
      - redis
    volumes:
      - ./services/forecast_analytics:/app
    networks:
      - weather-network

  auth:
    build: ./services/auth
    ports:
      - "5003:5003"
    environment:
      - FLASK_DEBUG=True
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/auth_db
      - JWT_SECRET_KEY=jwt-secret-key-change-in-production
    depends_on:
      - db
    volumes:
      - ./services/auth:/app
    networks:
      - weather-network

  db:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=weather_db,auth_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - weather-network

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - weather-network

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - weather-network

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - weather-network

networks:
  weather-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  grafana_data: